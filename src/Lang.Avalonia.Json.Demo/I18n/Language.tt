<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.Json" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------  
// <auto-generated>  
//     This code was generated by a tool.  
//     Changes to this file may cause incorrect behavior and will be lost if  
//     the code is regenerated.  
// </auto-generated>  
//------------------------------------------------------------------------------
<#
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string jsonFilePath = Directory.GetFiles(templateDirectory, "*.json").FirstOrDefault();
    
    if (jsonFilePath != null)
    {
        string jsonContent = File.ReadAllText(jsonFilePath);
        using JsonDocument doc = JsonDocument.Parse(jsonContent);
        JsonElement root = doc.RootElement;

        // 筛选出包含子模块的根节点（排除元数据节点）
        var moduleRootNodes = root.EnumerateObject()
            .Where(p => 
                p.Value.ValueKind == JsonValueKind.Object && 
                !new[] { "language", "description", "cultureName" }.Contains(p.Name)
            )
            .ToList();

        // 存储类节点信息：(类节点JSON元素, 完整命名空间, 类名)
        var classNodes = new List<(JsonElement Element, string Namespace, string ClassName)>();

        // 遍历所有模块根节点（例如JSON中的"Localization"节点）
        foreach (var rootNode in moduleRootNodes)
        {
            string rootNamespace = rootNode.Name; // 使用实际节点名作为根命名空间
            JsonElement rootNodeElement = rootNode.Value;

            // 遍历根节点下的一级模块（Main、DevelopModule等）
            foreach (var moduleNode in rootNodeElement.EnumerateObject())
            {
                string moduleName = moduleNode.Name; // 模块名
                JsonElement moduleElement = moduleNode.Value;

                // 遍历模块下的类节点（MainView、SettingView等）
                foreach (var classNode in moduleElement.EnumerateObject())
                {
                    string className = classNode.Name; // 类名
                    string fullNamespace = $"{rootNamespace}.{moduleName}"; // 完整命名空间
                    classNodes.Add((classNode.Value, fullNamespace, className));
                }
            }
        }

        // 按命名空间分组生成代码
        var namespaceGroups = classNodes.GroupBy(n => n.Namespace)
            .ToDictionary(g => g.Key, g => g.ToList());

        foreach (var nsGroup in namespaceGroups)
        {
            string namespaceName = nsGroup.Key;
            var classesInNamespace = nsGroup.Value;

            WriteLine($"namespace {namespaceName}");
            WriteLine("{");

            foreach (var (element, _, className) in classesInNamespace)
            {
                GenerateClass(element, SanitizeName(className), namespaceName);
            }

            WriteLine("}");
            WriteLine("\r\n");
        }
    }
    else
    {
        Write("JSON file not found, please ensure there is a JSON file in the template directory.");
    }

    void GenerateClass(JsonElement classElement, string className, string namespaceName)
    {
        WriteLine($"    public static class {className}");
        WriteLine("    {");

        foreach (var field in classElement.EnumerateObject())
        {
            string fieldName = SanitizeName(field.Name);
            string fullKey = $"{namespaceName}.{className}.{fieldName}";
            WriteLine($"        public static readonly string {fieldName} = \"{fullKey}\";");
        }

        WriteLine("    }");
        WriteLine("\r\n");
    }

    string SanitizeName(string name)
    {
        if (string.IsNullOrEmpty(name)) return "Unnamed";

        var sanitized = new string(name.Where(c => char.IsLetterOrDigit(c) || c == '_').ToArray());
        
        if (sanitized.Length > 0 && char.IsDigit(sanitized[0]))
            sanitized = "_" + sanitized;

        return sanitized.Length == 0 ? "Unnamed" : sanitized;
    }
#>