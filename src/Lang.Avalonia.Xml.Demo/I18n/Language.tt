<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------  
// <auto-generated>  
//     This code was generated by a tool.  
//     Changes to this file may cause incorrect behavior and will be lost if  
//     the code is regenerated.  
// </auto-generated>  
//------------------------------------------------------------------------------
<#
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string xmlFilePath = Directory.GetFiles(templateDirectory, "*.xml").FirstOrDefault();
    
    if (xmlFilePath != null)
    {
        XDocument xdoc = XDocument.Load(xmlFilePath);
        // 获取所有作为类节点的元素（有子节点但没有孙节点的元素）
        var classNodes = xdoc.Nodes().OfType<XElement>()
                            .DescendantsAndSelf()
                            .Where(e => e.HasElements && !e.Elements().Any(c => c.HasElements))
                            .Distinct()
                            .ToList();

        // 按命名空间分组
        var namespaceGroups = new Dictionary<string, List<XElement>>();
        
        foreach (var classNode in classNodes)
        {
            var namespaceSegments = classNode.Ancestors().Reverse().Select(node => node.Name.LocalName);
            string namespaceName = string.Join(".", namespaceSegments);
            
            if (!namespaceGroups.ContainsKey(namespaceName))
            {
                namespaceGroups[namespaceName] = new List<XElement>();
            }
            namespaceGroups[namespaceName].Add(classNode);
        }

        // 生成每个命名空间及其包含的类
        foreach (var nsGroup in namespaceGroups)
        {
            string namespaceName = nsGroup.Key;
            var classNodesInNs = nsGroup.Value;
            
            // 生成命名空间块
            WriteLine($"namespace {namespaceName}");
            WriteLine("{");
            
            // 在命名空间内生成所有类
            foreach (var classNode in classNodesInNs)
            {
                GenerateClass(classNode, namespaceName);
            }
            
            WriteLine("}");
            WriteLine("\r\n"); // 命名空间之间添加空行
        }
    }
    else
    {
        Write("XML file not found, please ensure that there is an XML file in the current directory");
    }

    // 生成单个类的代码
    void GenerateClass(XElement element, string namespaceName)
    {
        string className = element.Name.LocalName;
        
        WriteLine($"    public static class {className}");
        WriteLine("    {");
        
        var fieldNodes = element.Elements();
        foreach (var fieldNode in fieldNodes)
        {
            var propertyName = fieldNode.Name.LocalName;
            // 构建完整的语言键
            var languageKey = $"{namespaceName}.{className}.{propertyName}";
            WriteLine($"        public static readonly string {propertyName} = \"{languageKey}\";");
        }
        
        WriteLine("    }");
        WriteLine("\r\n"); // 类之间添加空行
    }
#>
